# 启动指令
# llamafactory-cli train ./my/train.yaml
# NCCL_P2P_DISABLE="1" NCCL_IB_DISABLE="1" OMP_NUM_THREADS=1 CUDA_VISIBLE_DEVICES=0,1 llamafactory-cli train ./my/train.yaml
# NCCL_P2P_DISABLE="1" NCCL_IB_DISABLE="1" OMP_NUM_THREADS=1 CUDA_VISIBLE_DEVICES=1 llamafactory-cli train ./my/train.yaml

# pip install -e '.[torch,metrics]'

# Meta-Llama-3-8B-Instruct
# Meta-Llama-3.1-8B-Instruct
# Mistral-7B-Instruct-v0.3
# Qwen2-7B-Instruct
# Llama-3.2-3B-Instruct

model_name_or_path: /home/lx/models/Meta-Llama-3.1-8B-Instruct
trust_remote_code: true

### method
stage: sft
do_train: true
finetuning_type: lora
lora_target: all
lora_rank: 8
#lora_alpha: 16
#lora_dropout: 0.05

### dataset
dataset: my_training_set
template: llama3
cutoff_len: 1536
max_samples: 130000
overwrite_cache: true
preprocessing_num_workers: 16
dataloader_num_workers: 4

### output
output_dir: /home/lx/models/sft/kgqa-llama-3.1-8B-250328
logging_steps: 10
save_steps: 500
save_total_limit: 10
plot_loss: true
#overwrite_output_dir: true
save_only_model: false


### train
per_device_train_batch_size: 1
gradient_accumulation_steps: 8
learning_rate: 2.0e-5
num_train_epochs: 3.0
lr_scheduler_type: cosine
warmup_ratio: 0.03
bf16: true
ddp_timeout: 180000000
resume_from_checkpoint: null
#use_cache: false

### eval
# eval_dataset: alpaca_en_demo
# val_size: 0.1
# per_device_eval_batch_size: 1
# eval_strategy: steps
# eval_steps: 500
